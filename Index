<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IES GPS Opravy - Dokumentace a zdrojov√© k√≥dy</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }
        h1 {
            color: #764ba2;
            border-bottom: 3px solid #667eea;
            padding-bottom: 10px;
            margin-bottom: 30px;
        }
        h2 {
            color: #667eea;
            margin-top: 30px;
            border-left: 4px solid #764ba2;
            padding-left: 10px;
        }
        h3 {
            color: #555;
            margin-top: 20px;
        }
        .problem-box {
            background: #ffebee;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }
        .solution-box {
            background: #e8f5e9;
            border-left: 4px solid #4caf50;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }
        .code-section {
            background: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 20px;
            margin: 20px 0;
            position: relative;
        }
        .code-header {
            background: #333;
            color: white;
            padding: 10px;
            margin: -20px -20px 15px -20px;
            border-radius: 5px 5px 0 0;
            font-family: monospace;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        pre {
            background: #282c34;
            color: #abb2bf;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            font-size: 14px;
            line-height: 1.5;
        }
        code {
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        }
        .inline-code {
            background: #f0f0f0;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: monospace;
            color: #d63384;
        }
        .priority {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 12px;
            margin-left: 10px;
        }
        .priority-high {
            background: #ff5252;
            color: white;
        }
        .priority-medium {
            background: #ff9800;
            color: white;
        }
        .priority-low {
            background: #4caf50;
            color: white;
        }
        .download-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 5px;
            transition: transform 0.2s;
        }
        .download-btn:hover {
            transform: scale(1.05);
        }
        .file-list {
            background: #f9f9f9;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            padding: 15px;
            margin: 20px 0;
        }
        .file-item {
            padding: 8px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .file-item:last-child {
            border-bottom: none;
        }
        .warning-box {
            background: #fff3e0;
            border-left: 4px solid #ff9800;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }
        .implementation-steps {
            background: #f3e5f5;
            padding: 20px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .step {
            display: flex;
            align-items: flex-start;
            margin: 15px 0;
        }
        .step-number {
            background: #764ba2;
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            flex-shrink: 0;
            font-weight: bold;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background: #667eea;
            color: white;
        }
        tr:hover {
            background: #f5f5f5;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöó IES GPS Opravy - Kompletn√≠ ≈ôe≈°en√≠ probl√©m≈Ø s GPS p≈ôi dlouh√Ωch cest√°ch</h1>
        
        <div class="warning-box">
            <strong>‚ö†Ô∏è D≈Øle≈æit√©:</strong> P≈ôed implementac√≠ zmƒõn vytvo≈ôte z√°lohu v≈°ech soubor≈Ø! Testujte zmƒõny postupnƒõ na testovac√≠m za≈ô√≠zen√≠.
        </div>

        <h2>üìã Obsah bal√≠ƒçku</h2>
        <div class="file-list">
            <div class="file-item">
                <span>üìÑ IesService_Fixed.java</span>
                <span class="priority priority-high">KRITICK√Å OPRAVA</span>
            </div>
            <div class="file-item">
                <span>üìÑ FusedLocationHelper.java</span>
                <span class="priority priority-high">NOV√Å T≈ò√çDA</span>
            </div>
            <div class="file-item">
                <span>üìÑ LocationValidator.java</span>
                <span class="priority priority-medium">NOV√Å T≈ò√çDA</span>
            </div>
            <div class="file-item">
                <span>üìÑ AndroidManifest_additions.xml</span>
                <span class="priority priority-high">D≈ÆLE≈ΩIT√â</span>
            </div>
            <div class="file-item">
                <span>üìÑ GPS_Constants.java</span>
                <span class="priority priority-low">KONFIGURACE</span>
            </div>
        </div>

        <h2>üî¥ Identifikovan√© probl√©my</h2>
        
        <div class="problem-box">
            <h3>Problem #1: Pou≈æ√≠v√°n√≠ zastaral√Ωch GPS dat</h3>
            <p>Aplikace neovƒõ≈ôuje st√°≈ô√≠ GPS lokace a m≈Ø≈æe pou≈æ√≠vat data star√° i nƒõkolik minut, co≈æ zp≈Øsobuje "skoky" na nesmysln√© pozice.</p>
        </div>
        
        <div class="problem-box">
            <h3>Problem #2: Ztr√°ta GPS sign√°lu v Doze Mode</h3>
            <p>Android p≈ôi dlouh√Ωch cest√°ch p≈ôep√≠n√° do √∫sporn√©ho re≈æimu a vyp√≠n√° GPS updates. Chyb√≠ WakeLock a Foreground Service.</p>
        </div>
        
        <div class="problem-box">
            <h3>Problem #3: Nen√≠ detekce a o≈°et≈ôen√≠ v√Ωpadk≈Ø GPS</h3>
            <p>P≈ôi ztr√°tƒõ sign√°lu (tunel, gar√°≈æ) se GPS nerestartuje a aplikace "zamrzne" na posledn√≠ pozici.</p>
        </div>
        
        <div class="problem-box">
            <h3>Problem #4: Chyb√≠ validace GPS dat</h3>
            <p>P≈ôij√≠maj√≠ se i fyzicky nemo≈æn√© pozice (skoky o stovky km, rychlost p≈ôes 220 km/h).</p>
        </div>

        <h2>‚úÖ ≈òe≈°en√≠ a implementace</h2>

        <div class="implementation-steps">
            <h3>Kroky implementace:</h3>
            
            <div class="step">
                <div class="step-number">1</div>
                <div>
                    <strong>Z√°loha soubor≈Ø</strong><br>
                    Zaz√°lohujte: <span class="inline-code">IesService.java</span>, <span class="inline-code">Main.java</span>, <span class="inline-code">AndroidManifest.xml</span>
                </div>
            </div>
            
            <div class="step">
                <div class="step-number">2</div>
                <div>
                    <strong>P≈ôid√°n√≠ nov√Ωch t≈ô√≠d</strong><br>
                    Zkop√≠rujte <span class="inline-code">FusedLocationHelper.java</span> a <span class="inline-code">LocationValidator.java</span> do package <span class="inline-code">cz.hobl.pech.ies.location</span>
                </div>
            </div>
            
            <div class="step">
                <div class="step-number">3</div>
                <div>
                    <strong>√öprava IesService.java</strong><br>
                    Nahraƒète metodu <span class="inline-code">updateLocation()</span> novou verz√≠ z <span class="inline-code">IesService_Fixed.java</span>
                </div>
            </div>
            
            <div class="step">
                <div class="step-number">4</div>
                <div>
                    <strong>Aktualizace AndroidManifest.xml</strong><br>
                    P≈ôidejte nov√° opr√°vnƒõn√≠ a nastaven√≠ slu≈æby podle <span class="inline-code">AndroidManifest_additions.xml</span>
                </div>
            </div>
            
            <div class="step">
                <div class="step-number">5</div>
                <div>
                    <strong>Testov√°n√≠</strong><br>
                    Otestujte na tras√°ch del≈°√≠ch ne≈æ 2 hodiny, pr≈Øjezdy tunely a oblastmi se slab√Ωm sign√°lem
                </div>
            </div>
        </div>

        <h2>üìÅ Zdrojov√© k√≥dy</h2>

        <!-- IesService_Fixed.java -->
        <div class="code-section">
            <div class="code-header">
                <span>IesService_Fixed.java - Hlavn√≠ opravy</span>
                <button class="download-btn" onclick="downloadFile('IesService_Fixed.java', iesServiceFixed)">‚¨á St√°hnout</button>
            </div>
            <pre><code id="iesServiceFixed">package cz.hobl.pech.ies;

import android.location.Location;
import android.os.SystemClock;
import java.util.concurrent.TimeUnit;

public class IesService extends LifecycleService implements Runnable, LocationListener, SensorEventListener {
    
    // Nov√© konstanty pro GPS validaci
    private static final long MAX_LOCATION_AGE_MS = 10000; // 10 sekund
    private static final float MAX_LOCATION_JUMP_METERS = 500; // 500 metr≈Ø
    private static final float MAX_SPEED_MS = 61.11f; // 220 km/h
    private static final float MIN_ACCURACY_METERS = 50; // 50 metr≈Ø
    
    private Location lastValidLocation = null;
    private long lastValidLocationTime = 0;
    private int consecutiveInvalidLocations = 0;
    
    /**
     * Vylep≈°en√° metoda pro zpracov√°n√≠ GPS lokace s validac√≠
     */
    private void updateLocation(Location location) {
        // Kontrola null
        if (location == null || main == null) {
            handleInvalidLocation("Location or main is null");
            return;
        }
        
        // 1. KONTROLA ST√Å≈ò√ç LOKACE
        long locationAge = SystemClock.elapsedRealtimeNanos() - location.getElapsedRealtimeNanos();
        if (TimeUnit.NANOSECONDS.toMillis(locationAge) > MAX_LOCATION_AGE_MS) {
            handleInvalidLocation("Location too old: " + TimeUnit.NANOSECONDS.toSeconds(locationAge) + "s");
            return;
        }
        
        // 2. Z√ÅKLADN√ç VALIDACE
        if (!isBasicLocationValid(location)) {
            handleInvalidLocation("Basic validation failed");
            return;
        }
        
        // 3. KONTROLA SKOKU V POZICI
        if (lastValidLocation != null && !isLocationJumpValid(location, lastValidLocation)) {
            handleInvalidLocation("Location jump too large");
            return;
        }
        
        // 4. KONTROLA P≈òESNOSTI
        if (location.hasAccuracy() && location.getAccuracy() > MIN_ACCURACY_METERS) {
            // Pokud m√°me historii dobr√Ωch dat, m≈Ø≈æeme b√Ωt tolerantnƒõj≈°√≠
            if (!hasRecentGoodFix()) {
                handleInvalidLocation("No recent good fix, accuracy: " + location.getAccuracy());
                return;
            }
        }
        
        // 5. BLUETOOTH PRIORITA
        if (shouldSkipDueToBluetoothPriority()) {
            return;
        }
        
        // LOKACE JE VALIDN√ç - zpracovat
        processValidLocation(location);
    }
    
    /**
     * Z√°kladn√≠ validace GPS lokace
     */
    private boolean isBasicLocationValid(Location location) {
        // Kontrola nulov√Ωch sou≈ôadnic
        if (location.getLatitude() == 0 && location.getLongitude() == 0) {
            return false;
        }
        
        // Kontrola stejn√Ωch sou≈ôadnic (GPS chyba)
        if (location.getLatitude() == location.getLongitude() && location.getAccuracy() > 100) {
            return false;
        }
        
        // Kontrola rozsahu sou≈ôadnic (ƒåesk√° republika)
        if (location.getLatitude() < 48.5 || location.getLatitude() > 51.1 ||
            location.getLongitude() < 12.0 || location.getLongitude() > 18.9) {
            IesLogger.logTest("GPS", "Location outside Czech Republic bounds");
            // Nemus√≠ b√Ωt chyba, ale zalogovat
        }
        
        // Kontrola rychlosti
        if (location.hasSpeed() && location.getSpeed() > MAX_SPEED_MS) {
            return false;
        }
        
        return true;
    }
    
    /**
     * Kontrola skoku v pozici proti posledn√≠ validn√≠ lokaci
     */
    private boolean isLocationJumpValid(Location newLocation, Location lastLocation) {
        float distance = newLocation.distanceTo(lastLocation);
        long timeDiff = newLocation.getTime() - lastLocation.getTime();
        
        // Pokud je ƒçasov√Ω rozd√≠l moc mal√Ω, nem≈Ø≈æe b√Ωt vzd√°lenost velk√°
        if (timeDiff > 0) {
            float speedMs = distance / (timeDiff / 1000f);
            if (speedMs > MAX_SPEED_MS) {
                IesLogger.logTest("GPS", "Invalid jump: " + distance + "m in " + timeDiff + "ms");
                return false;
            }
        }
        
        // Absolutn√≠ kontrola vzd√°lenosti
        if (distance > MAX_LOCATION_JUMP_METERS && timeDiff < 5000) {
            return false;
        }
        
        return true;
    }
    
    /**
     * Kontrola ned√°vn√Ωch dobr√Ωch GPS fix≈Ø
     */
    private boolean hasRecentGoodFix() {
        if (GpsStates == null || GpsStates.isEmpty()) {
            return false;
        }
        
        int goodFixCount = 0;
        for (int i = 0; i < Math.min(5, GpsStates.size()); i++) {
            if (GpsStates.get(i).precision < MIN_ACCURACY_METERS) {
                goodFixCount++;
            }
        }
        
        return goodFixCount >= 2; // Alespo≈à 2 dobr√© fixy v posledn√≠ch 5
    }
    
    /**
     * Kontrola Bluetooth priority
     */
    private boolean shouldSkipDueToBluetoothPriority() {
        if (main.prioBlueGPS && main.btUnit != null && main.btUnit.connected) {
            long btGpsAge = SystemClock.elapsedRealtime() - main.btUnit.lastGpsTime;
            if (main.btUnit.lastGpsTime != 0 && btGpsAge < 10000) {
                return true; // Skip, pou≈æ√≠v√°me Bluetooth GPS
            }
        }
        return false;
    }
    
    /**
     * Zpracov√°n√≠ validn√≠ lokace
     */
    private void processValidLocation(Location location) {
        // Reset ƒç√≠taƒçe nevalidn√≠ch lokac√≠
        consecutiveInvalidLocations = 0;
        
        // Ulo≈æen√≠ jako posledn√≠ validn√≠
        lastValidLocation = location;
        lastValidLocationTime = System.currentTimeMillis();
        
        // Vytvo≈ôen√≠ nov√©ho stavu
        currentState = new State(
            main, 
            currentBz,
            location.getLatitude(),
            location.getLongitude(),
            location.getSpeed() * 3.6,
            location.getAccuracy(),
            SystemClock.elapsedRealtime(),
            false,
            true
        );
        
        // Zpracov√°n√≠ nov√©ho stavu
        onNewActualState();
        
        // Log √∫spƒõ≈°n√© lokace
        if (IesLogger.isEnabled()) {
            IesLogger.logTest("GPS", "Valid location processed: " +
                "[" + location.getLatitude() + ", " + location.getLongitude() + "]" +
                " acc: " + location.getAccuracy());
        }
    }
    
    /**
     * Zpracov√°n√≠ nevalidn√≠ lokace
     */
    private void handleInvalidLocation(String reason) {
        consecutiveInvalidLocations++;
        
        IesLogger.logTest("GPS", "Invalid location: " + reason + 
            " (consecutive: " + consecutiveInvalidLocations + ")");
        
        // Po 10 nevalidn√≠ch lokac√≠ch restartovat GPS
        if (consecutiveInvalidLocations >= 10) {
            restartGpsProvider();
            consecutiveInvalidLocations = 0;
        }
    }
    
    /**
     * Restart GPS provideru p≈ôi probl√©mech
     */
    @SuppressLint("MissingPermission")
    private void restartGpsProvider() {
        IesLogger.logTest("GPS", "Restarting GPS provider");
        
        if (locationManager != null) {
            locationManager.removeUpdates(this);
            
            // Poƒçkat 2 sekundy
            new Handler().postDelayed(() -> {
                try {
                    locationManager.requestLocationUpdates(
                        LocationManager.GPS_PROVIDER,
                        1000,
                        0,
                        this
                    );
                    
                    // Zkusit i Network provider jako z√°lohu
                    if (locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
                        locationManager.requestLocationUpdates(
                            LocationManager.NETWORK_PROVIDER,
                            5000,
                            0,
                            this
                        );
                    }
                } catch (Exception e) {
                    Fce.err(e);
                }
            }, 2000);
        }
    }
}
</code></pre>
        </div>

        <!-- FusedLocationHelper.java -->
        <div class="code-section">
            <div class="code-header">
                <span>FusedLocationHelper.java - Nov√° t≈ô√≠da pro Fused Location</span>
                <button class="download-btn" onclick="downloadFile('FusedLocationHelper.java', fusedLocationHelper)">‚¨á St√°hnout</button>
            </div>
            <pre><code id="fusedLocationHelper">package cz.hobl.pech.ies.location;

import android.annotation.SuppressLint;
import android.content.Context;
import android.location.Location;
import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationCallback;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationResult;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.location.Priority;

import java.util.concurrent.TimeUnit;

/**
 * Helper t≈ô√≠da pro robustn√≠ GPS tracking pomoc√≠ Fused Location Provider
 * ≈òe≈°√≠ probl√©my se ztr√°tou sign√°lu a nep≈ôesn√Ωmi daty
 */
public class FusedLocationHelper {
    
    private static final String TAG = "FusedLocationHelper";
    
    // Konfigurace
    private static final long LOCATION_UPDATE_INTERVAL = 1000; // 1 sekunda
    private static final long FASTEST_UPDATE_INTERVAL = 500; // 0.5 sekundy
    private static final long MAX_WAIT_TIME = 2000; // 2 sekundy
    private static final long STALE_LOCATION_THRESHOLD = 30000; // 30 sekund
    private static final float MIN_DISPLACEMENT = 0; // 0 metr≈Ø - chceme v≈°echny updaty
    
    private final Context context;
    private final LocationListener listener;
    private FusedLocationProviderClient fusedLocationClient;
    private LocationCallback locationCallback;
    private LocationRequest locationRequest;
    
    // Stav
    private Location lastKnownGoodLocation = null;
    private long lastLocationTime = 0;
    private boolean isTracking = false;
    private int lostSignalCount = 0;
    
    // Detekce v√Ωpadk≈Ø
    private final Handler lossDetectionHandler = new Handler(Looper.getMainLooper());
    private Runnable lossDetectionRunnable;
    
    public interface LocationListener {
        void onLocationChanged(Location location);
        void onLocationLost();
        void onLocationRestored();
    }
    
    public FusedLocationHelper(Context context, LocationListener listener) {
        this.context = context;
        this.listener = listener;
        this.fusedLocationClient = LocationServices.getFusedLocationProviderClient(context);
        
        createLocationRequest();
        createLocationCallback();
        setupLossDetection();
    }
    
    /**
     * Vytvo≈ôen√≠ LocationRequest s optim√°ln√≠mi parametry pro tracking vozidla
     */
    private void createLocationRequest() {
        locationRequest = new LocationRequest.Builder(Priority.PRIORITY_HIGH_ACCURACY, LOCATION_UPDATE_INTERVAL)
            .setWaitForAccurateLocation(false) // Neƒçekat na p≈ôesnou lokaci
            .setMinUpdateIntervalMillis(FASTEST_UPDATE_INTERVAL)
            .setMaxUpdateDelayMillis(MAX_WAIT_TIME)
            .setMinUpdateDistanceMeters(MIN_DISPLACEMENT)
            .build();
    }
    
    /**
     * Callback pro zpracov√°n√≠ GPS lokac√≠
     */
    private void createLocationCallback() {
        locationCallback = new LocationCallback() {
            @Override
            public void onLocationResult(LocationResult locationResult) {
                if (locationResult == null) {
                    return;
                }
                
                // Vyber nejlep≈°√≠ lokace z v√Ωsledk≈Ø
                Location bestLocation = selectBestLocation(locationResult);
                
                if (bestLocation != null) {
                    processLocation(bestLocation);
                }
            }
        };
    }
    
    /**
     * V√Ωbƒõr nejlep≈°√≠ lokace z LocationResult
     */
    private Location selectBestLocation(LocationResult locationResult) {
        Location bestLocation = null;
        float bestAccuracy = Float.MAX_VALUE;
        long currentTime = SystemClock.elapsedRealtimeNanos();
        
        for (Location location : locationResult.getLocations()) {
            if (location == null) continue;
            
            // Kontrola st√°≈ô√≠
            long locationAge = currentTime - location.getElapsedRealtimeNanos();
            if (TimeUnit.NANOSECONDS.toMillis(locationAge) > 5000) {
                continue; // P≈ô√≠li≈° star√©
            }
            
            // Kontrola p≈ôesnosti
            if (location.hasAccuracy()) {
                float accuracy = location.getAccuracy();
                
                // Preferuj nejp≈ôesnƒõj≈°√≠ lokaci
                if (accuracy < bestAccuracy) {
                    bestAccuracy = accuracy;
                    bestLocation = location;
                }
            }
        }
        
        return bestLocation;
    }
    
    /**
     * Zpracov√°n√≠ validn√≠ lokace
     */
    private void processLocation(Location location) {
        // Validace
        if (!isLocationValid(location)) {
            return;
        }
        
        // Detekce obnoven√≠ sign√°lu
        long currentTime = System.currentTimeMillis();
        if (lastLocationTime > 0 && (currentTime - lastLocationTime) > STALE_LOCATION_THRESHOLD) {
            listener.onLocationRestored();
            lostSignalCount = 0;
        }
        
        // Aktualizace stavu
        lastLocationTime = currentTime;
        lastKnownGoodLocation = location;
        
        // P≈ôed√°n√≠ lokace
        listener.onLocationChanged(location);
    }
    
    /**
     * Komplexn√≠ validace GPS lokace
     */
    private boolean isLocationValid(Location location) {
        if (location == null) return false;
        
        // Z√°kladn√≠ kontroly
        if (location.getLatitude() == 0 && location.getLongitude() == 0) {
            return false;
        }
        
        // Kontrola duplicitn√≠ch sou≈ôadnic (GPS chyba)
        if (Math.abs(location.getLatitude() - location.getLongitude()) < 0.00001 && 
            location.getAccuracy() > 100) {
            return false;
        }
        
        // Kontrola p≈ôesnosti
        if (location.hasAccuracy() && location.getAccuracy() > 200) {
            return false; // P≈ô√≠li≈° nep≈ôesn√©
        }
        
        // Kontrola rychlosti
        if (location.hasSpeed() && location.getSpeed() > 61.11) { // 220 km/h
            return false;
        }
        
        // Kontrola skoku v pozici
        if (lastKnownGoodLocation != null) {
            float distance = location.distanceTo(lastKnownGoodLocation);
            long timeDiff = location.getTime() - lastKnownGoodLocation.getTime();
            
            if (timeDiff > 0) {
                float speedMs = distance / (timeDiff / 1000f);
                if (speedMs > 61.11) { // 220 km/h
                    return false; // Nemo≈æn√Ω skok
                }
            }
            
            // Absolutn√≠ kontrola - max 1km skok p≈ôi kr√°tk√©m intervalu
            if (distance > 1000 && timeDiff < 5000) {
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * Nastaven√≠ detekce v√Ωpadk≈Ø GPS
     */
    private void setupLossDetection() {
        lossDetectionRunnable = new Runnable() {
            @Override
            public void run() {
                if (!isTracking) return;
                
                long currentTime = System.currentTimeMillis();
                if (lastLocationTime > 0 && 
                    (currentTime - lastLocationTime) > STALE_LOCATION_THRESHOLD) {
                    
                    lostSignalCount++;
                    listener.onLocationLost();
                    
                    // Po 3 v√Ωpadc√≠ch zkusit restart
                    if (lostSignalCount >= 3) {
                        restartLocationUpdates();
                        lostSignalCount = 0;
                    }
                }
                
                // Znovu napl√°novat kontrolu
                lossDetectionHandler.postDelayed(this, 10000); // Ka≈æd√Ωch 10 sekund
            }
        };
    }
    
    /**
     * Spu≈°tƒõn√≠ GPS trackingu
     */
    @SuppressLint("MissingPermission")
    public void startLocationUpdates() {
        if (isTracking) return;
        
        isTracking = true;
        
        fusedLocationClient.requestLocationUpdates(
            locationRequest,
            locationCallback,
            Looper.getMainLooper()
        );
        
        // Spustit detekci v√Ωpadk≈Ø
        lossDetectionHandler.postDelayed(lossDetectionRunnable, 10000);
        
        // Z√≠skat posledn√≠ zn√°mou lokaci
        fusedLocationClient.getLastLocation()
            .addOnSuccessListener(location -> {
                if (location != null && isLocationValid(location)) {
                    processLocation(location);
                }
            });
    }
    
    /**
     * Zastaven√≠ GPS trackingu
     */
    public void stopLocationUpdates() {
        isTracking = false;
        
        fusedLocationClient.removeLocationUpdates(locationCallback);
        lossDetectionHandler.removeCallbacks(lossDetectionRunnable);
    }
    
    /**
     * Restart GPS p≈ôi probl√©mech
     */
    @SuppressLint("MissingPermission")
    private void restartLocationUpdates() {
        if (!
